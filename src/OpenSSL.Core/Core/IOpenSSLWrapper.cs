using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

namespace OpenSSL.Core.Core
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int err_cb(IntPtr str, uint len, IntPtr u);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int pem_password_cb(IntPtr buf, int size, int rwflag, IntPtr userdata);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int GeneratorHandler(int p, int n, IntPtr arg);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void ObjectNameHandler(IntPtr name, IntPtr arg);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CRYPTO_locking_callback(int mode, int type, string file, int line);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CRYPTO_id_callback(IntPtr tid);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int VerifyCertCallback(int ok, IntPtr x509_store_ctx);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int client_cert_cb(IntPtr ssl, out IntPtr x509, out IntPtr pkey);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate IntPtr MallocFunctionPtr(uint num, IntPtr file, int line);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate IntPtr ReallocFunctionPtr(IntPtr addr, uint num, IntPtr file, int line);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void FreeFunctionPtr(IntPtr addr);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate IntPtr EC_KEY_dup_func(IntPtr x);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate IntPtr ECDH_KDF([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] byte[] pin, int inlen, IntPtr pout, ref int outlen);

    [StructLayout(LayoutKind.Sequential)]
    public class bn_gencb_st
    {
        /// To handle binary (in)compatibility
        public uint ver;
        /// callback-specific data
        public IntPtr arg;
        public GeneratorHandler cb;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void EC_KEY_free_func(IntPtr x);

    public interface ILibCryptoWrapper
    {
        IntPtr SSLeay_version(int type);
        uint SSLeay();
        IntPtr BN_options();
        IntPtr MD2_options();
        IntPtr RC4_options();
        IntPtr DES_options();
        IntPtr idea_options();
        IntPtr BF_options();
        int CRYPTO_THREADID_set_callback(CRYPTO_id_callback cb);
        void CRYPTO_THREADID_set_numeric(IntPtr id, uint val);
        void CRYPTO_set_locking_callback(CRYPTO_locking_callback cb);
        int CRYPTO_num_locks();
        int CRYPTO_add_lock(IntPtr ptr, int amount, CryptoLockTypes type, string file, int line);
        void OPENSSL_add_all_algorithms_noconf();
        void OPENSSL_add_all_algorithms_conf();
        void CRYPTO_free(IntPtr p);
        IntPtr CRYPTO_malloc(int num, string file, int line);
        int CRYPTO_set_mem_ex_functions(MallocFunctionPtr m, ReallocFunctionPtr r, FreeFunctionPtr f);
        void CRYPTO_cleanup_all_ex_data();
        void OBJ_NAME_do_all(int type, ObjectNameHandler fn, IntPtr arg);
        void OBJ_NAME_do_all_sorted(int type, ObjectNameHandler fn, IntPtr arg);
        int OBJ_txt2nid(string s);
        IntPtr OBJ_nid2obj(int n);
        IntPtr OBJ_nid2ln(int n);
        IntPtr OBJ_nid2sn(int n);
        int OBJ_obj2nid(IntPtr o);
        IntPtr OBJ_txt2obj(string s, int no_name);
        int OBJ_ln2nid(string s);
        int OBJ_sn2nid(string s);
        IntPtr sk_new_null();
        int sk_num(IntPtr stack);
        int sk_find(IntPtr stack, IntPtr data);
        int sk_insert(IntPtr stack, IntPtr data, int where);
        IntPtr sk_shift(IntPtr stack);
        int sk_unshift(IntPtr stack, IntPtr data);
        int sk_push(IntPtr stack, IntPtr data);
        IntPtr sk_pop(IntPtr stack);
        IntPtr sk_delete(IntPtr stack, int loc);
        IntPtr sk_delete_ptr(IntPtr stack, IntPtr p);
        IntPtr sk_value(IntPtr stack, int index);
        IntPtr sk_set(IntPtr stack, int index, IntPtr data);
        IntPtr sk_dup(IntPtr stack);
        void sk_zero(IntPtr stack);
        void sk_free(IntPtr stack);
        IntPtr ASN1_INTEGER_new();
        void ASN1_INTEGER_free(IntPtr x);
        int ASN1_INTEGER_set(IntPtr a, int v);
        int ASN1_INTEGER_get(IntPtr a);
        IntPtr ASN1_TIME_set(IntPtr s, long t);
        int ASN1_UTCTIME_print(IntPtr bp, IntPtr a);
        IntPtr ASN1_TIME_new();
        void ASN1_TIME_free(IntPtr x);
        IntPtr ASN1_STRING_type_new(int type);
        IntPtr ASN1_STRING_dup(IntPtr a);
        void ASN1_STRING_free(IntPtr a);
        int ASN1_STRING_cmp(IntPtr a, IntPtr b);
        int ASN1_STRING_set(IntPtr str, byte[] data, int len);
        IntPtr ASN1_STRING_data(IntPtr x);
        int ASN1_STRING_length(IntPtr x);
        void ASN1_OBJECT_free(IntPtr obj);
        IntPtr X509_REQ_new();
        int X509_REQ_set_version(IntPtr x, int version);
        int X509_REQ_set_pubkey(IntPtr x, IntPtr pkey);
        IntPtr X509_REQ_get_pubkey(IntPtr req);
        int X509_REQ_set_subject_name(IntPtr x, IntPtr name);
        int X509_REQ_sign(IntPtr x, IntPtr pkey, IntPtr md);
        int X509_REQ_verify(IntPtr x, IntPtr pkey);
        int X509_REQ_digest(IntPtr data, IntPtr type, byte[] md, ref uint len);
        void X509_REQ_free(IntPtr a);
        IntPtr X509_REQ_to_X509(IntPtr r, int days, IntPtr pkey);
        int X509_REQ_print_ex(IntPtr bp, IntPtr x, uint nmflag, uint cflag);
        int X509_REQ_print(IntPtr bp, IntPtr x);
        IntPtr X509_new();
        IntPtr X509_dup(IntPtr x509);
        int X509_cmp(IntPtr a, IntPtr b);
        int X509_sign(IntPtr x, IntPtr pkey, IntPtr md);
        int X509_check_private_key(IntPtr x509, IntPtr pkey);
        int X509_verify(IntPtr x, IntPtr pkey);
        int X509_pubkey_digest(IntPtr data, IntPtr type, byte[] md, ref uint len);
        int X509_digest(IntPtr data, IntPtr type, byte[] md, ref uint len);
        int X509_set_version(IntPtr x, int version);
        int X509_set_serialNumber(IntPtr x, IntPtr serial);
        IntPtr X509_get_serialNumber(IntPtr x);
        int X509_set_issuer_name(IntPtr x, IntPtr name);
        IntPtr X509_get_issuer_name(IntPtr a);
        int X509_set_subject_name(IntPtr x, IntPtr name);
        IntPtr X509_get_subject_name(IntPtr a);
        int X509_set_notBefore(IntPtr x, IntPtr tm);
        int X509_set_notAfter(IntPtr x, IntPtr tm);
        int X509_set_pubkey(IntPtr x, IntPtr pkey);
        IntPtr X509_get_pubkey(IntPtr x);
        void X509_free(IntPtr x);
        int X509_verify_cert(IntPtr ctx);
        IntPtr X509_verify_cert_error_string(int n);
        IntPtr X509_to_X509_REQ(IntPtr x, IntPtr pkey, IntPtr md);
        int X509_print_ex(IntPtr bp, IntPtr x, uint nmflag, uint cflag);
        int X509_print(IntPtr bp, IntPtr x);
        IntPtr X509_find_by_issuer_and_serial(IntPtr sk, IntPtr name, IntPtr serial);
        IntPtr X509_find_by_subject(IntPtr sk, IntPtr name);
        int X509_check_trust(IntPtr x, int id, int flags);
        IntPtr X509_time_adj(IntPtr s, int adj, ref long t);
        IntPtr X509_gmtime_adj(IntPtr s, int adj);
        IntPtr d2i_X509_bio(IntPtr bp, ref IntPtr x509);
        int i2d_X509_bio(IntPtr bp, IntPtr x509);
        void X509_PUBKEY_free(IntPtr pkey);
        void X509_OBJECT_up_ref_count(IntPtr a);
        void X509_OBJECT_free_contents(IntPtr a);
        IntPtr X509_EXTENSION_new();
        void X509_EXTENSION_free(IntPtr x);
        IntPtr X509_EXTENSION_dup(IntPtr ex);
        int X509V3_EXT_print(IntPtr bio, IntPtr ext, uint flag, int indent);
        IntPtr X509V3_EXT_get_nid(int nid);
        int X509_add_ext(IntPtr x, IntPtr ex, int loc);
        int X509_add1_ext_i2d(IntPtr x, int nid, byte[] value, int crit, uint flags);
        IntPtr X509V3_EXT_conf_nid(IntPtr conf, IntPtr ctx, int ext_nid, string value);
        IntPtr X509_EXTENSION_create_by_NID(IntPtr ex, int nid, int crit, IntPtr data);
        int X509_EXTENSION_set_critical(IntPtr ex, int crit);
        int X509_EXTENSION_set_data(IntPtr ex, IntPtr data);
        IntPtr X509_EXTENSION_get_object(IntPtr ex);
        IntPtr X509_EXTENSION_get_data(IntPtr ne);
        int X509_EXTENSION_get_critical(IntPtr ex);
        IntPtr X509_STORE_new();
        int X509_STORE_add_cert(IntPtr ctx, IntPtr x);
        void X509_STORE_free(IntPtr x);
        int X509_STORE_up_ref(IntPtr x);
        IntPtr X509_STORE_CTX_new();
        int X509_STORE_CTX_init(IntPtr ctx, IntPtr store, IntPtr x509, IntPtr chain);
        void X509_STORE_CTX_free(IntPtr x);
        IntPtr X509_STORE_CTX_get_current_cert(IntPtr x509_store_ctx);
        int X509_STORE_CTX_get_error_depth(IntPtr x509_store_ctx);
        IntPtr X509_STORE_CTX_get0_store(IntPtr ctx);
        int X509_STORE_CTX_get_error(IntPtr x509_store_ctx);
        void X509_STORE_CTX_set_error(IntPtr x509_store_ctx, int error);
        void X509_INFO_free(IntPtr a);
        int X509_INFO_up_ref(IntPtr a);
        IntPtr X509_NAME_new();
        void X509_NAME_free(IntPtr a);
        IntPtr X509_NAME_dup(IntPtr xn);
        int X509_NAME_cmp(IntPtr a, IntPtr b);
        int X509_NAME_entry_count(IntPtr name);
        int X509_NAME_add_entry_by_NID(IntPtr name, int nid, int type, byte[] bytes, int len, int loc, int set);
        int X509_NAME_add_entry_by_txt(IntPtr name, byte[] field, int type, byte[] bytes, int len, int loc, int set);
        int X509_NAME_get_text_by_NID(IntPtr name, int nid, byte[] buf, int len);
        IntPtr X509_NAME_get_entry(IntPtr name, int loc);
        IntPtr X509_NAME_delete_entry(IntPtr name, int loc);
        int X509_NAME_get_index_by_NID(IntPtr name, int nid, int lastpos);
        int X509_NAME_digest(IntPtr data, IntPtr type, byte[] md, ref uint len);
        IntPtr X509_NAME_oneline(IntPtr a, byte[] buf, int size);
        int X509_NAME_print(IntPtr bp, IntPtr name, int obase);
        int X509_NAME_print_ex(IntPtr bp, IntPtr nm, int indent, uint flags);
        int RAND_set_rand_method(IntPtr meth);
        IntPtr RAND_get_rand_method();
        void RAND_cleanup();
        void RAND_seed(byte[] buf, int len);
        int RAND_pseudo_bytes(byte[] buf, int len);
        int RAND_bytes(byte[] buf, int num);
        void RAND_add(byte[] buf, int num, double entropy);
        int RAND_load_file(string file, int max_bytes);
        int RAND_write_file(string file);
        string RAND_file_name(byte[] buf, uint num);
        int RAND_status();
        int RAND_query_egd_bytes(string path, byte[] buf, int bytes);
        int RAND_egd(string path);
        int RAND_egd_bytes(string path, int bytes);
        int RAND_poll();
        int BN_rand(IntPtr rnd, int bits, int top, int bottom);
        int BN_pseudo_rand(IntPtr rnd, int bits, int top, int bottom);
        int BN_rand_range(IntPtr rnd, IntPtr range);
        int BN_pseudo_rand_range(IntPtr rnd, IntPtr range);
        int DSA_generate_parameters_ex(IntPtr dsa, int bits, byte[] seed, int seed_len, out int counter_ret, out IntPtr h_ret, bn_gencb_st callback);
        int DSA_generate_key(IntPtr dsa);
        IntPtr DSA_new();
        void DSA_free(IntPtr dsa);
        int DSA_up_ref(IntPtr dsa);
        int DSA_size(IntPtr dsa);
        int DSAparams_print(IntPtr bp, IntPtr x);
        int DSA_print(IntPtr bp, IntPtr x, int off);
        int DSA_sign(int type, byte[] dgst, int dlen, byte[] sig, out uint siglen, IntPtr dsa);
        int DSA_verify(int type, byte[] dgst, int dgst_len, byte[] sigbuf, int siglen, IntPtr dsa);
        IntPtr RSA_new();
        void RSA_free(IntPtr rsa);
        int RSA_up_ref(IntPtr rsa);
        int RSA_size(IntPtr rsa);
        int RSA_generate_key_ex(IntPtr rsa, int bits, IntPtr e, bn_gencb_st cb);
        int RSA_check_key(IntPtr rsa);
        int RSA_public_encrypt(int flen, byte[] from, byte[] to, IntPtr rsa, int padding);
        int RSA_private_encrypt(int flen, byte[] from, byte[] to, IntPtr rsa, int padding);
        int RSA_public_decrypt(int flen, byte[] from, byte[] to, IntPtr rsa, int padding);
        int RSA_private_decrypt(int flen, byte[] from, byte[] to, IntPtr rsa, int padding);
        int RSA_sign(int type, byte[] m, uint m_length, byte[] sigret, out uint siglen, IntPtr rsa);
        int RSA_verify(int type, byte[] m, uint m_length, byte[] sigbuf, uint siglen, IntPtr rsa);
        int RSA_print(IntPtr bp, IntPtr r, int offset);
        IntPtr DH_generate_parameters(int prime_len, int generator, IntPtr callback, IntPtr cb_arg);
        int DH_generate_parameters_ex(IntPtr dh, int prime_len, int generator, bn_gencb_st cb);
        int DH_generate_key(IntPtr dh);
        int DH_compute_key(byte[] key, IntPtr pub_key, IntPtr dh);
        IntPtr DH_new();
        void DH_free(IntPtr dh);
        int DH_up_ref(IntPtr dh);
        int DH_check(IntPtr dh, out int codes);
        int DHparams_print(IntPtr bp, IntPtr x);
        int DH_size(IntPtr dh);
        IntPtr BN_value_one();
        IntPtr BN_CTX_new();
        void BN_CTX_init(IntPtr c);
        void BN_CTX_free(IntPtr c);
        void BN_CTX_start(IntPtr ctx);
        IntPtr BN_CTX_get(IntPtr ctx);
        void BN_CTX_end(IntPtr ctx);
        IntPtr BN_new();
        void BN_free(IntPtr a);
        void BN_init(IntPtr a);
        IntPtr BN_bin2bn(byte[] s, int len, IntPtr ret);
        int BN_bn2bin(IntPtr a, byte[] to);
        void BN_clear_free(IntPtr a);
        void BN_clear(IntPtr a);
        IntPtr BN_dup(IntPtr a);
        IntPtr BN_copy(IntPtr a, IntPtr b);
        void BN_swap(IntPtr a, IntPtr b);
        int BN_cmp(IntPtr a, IntPtr b);
        int BN_sub(IntPtr r, IntPtr a, IntPtr b);
        int BN_add(IntPtr r, IntPtr a, IntPtr b);
        int BN_mul(IntPtr r, IntPtr a, IntPtr b, IntPtr ctx);
        int BN_num_bits(IntPtr a);
        int BN_sqr(IntPtr r, IntPtr a, IntPtr ctx);
        int BN_div(IntPtr dv, IntPtr rem, IntPtr m, IntPtr d, IntPtr ctx);
        int BN_print(IntPtr fp, IntPtr a);
        IntPtr BN_bn2hex(IntPtr a);
        IntPtr BN_bn2dec(IntPtr a);
        int BN_hex2bn(out IntPtr a, byte[] str);
        int BN_dec2bn(out IntPtr a, byte[] str);
        uint BN_mod_word(IntPtr a, uint w);
        uint BN_div_word(IntPtr a, uint w);
        int BN_mul_word(IntPtr a, uint w);
        int BN_add_word(IntPtr a, uint w);
        int BN_sub_word(IntPtr a, uint w);
        int BN_set_word(IntPtr a, uint w);
        uint BN_get_word(IntPtr a);
        IntPtr d2i_DHparams(out IntPtr a, IntPtr pp, int length);
        int i2d_DHparams(IntPtr a, IntPtr pp);
        IntPtr ASN1_d2i_bio(IntPtr xnew, IntPtr d2i, IntPtr bp, IntPtr x);
        int ASN1_i2d_bio(IntPtr i2d, IntPtr bp, IntPtr x);
        int PEM_write_bio_X509(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_X509(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        IntPtr PEM_read_bio_PKCS7(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        IntPtr d2i_PKCS7_bio(IntPtr bp, IntPtr p7);
        void PKCS7_free(IntPtr p7);
        IntPtr d2i_PKCS12_bio(IntPtr bp, IntPtr p12);
        int i2d_PKCS12_bio(IntPtr bp, IntPtr p12);
        IntPtr PKCS12_create(string pass, string name, IntPtr pkey, IntPtr cert, IntPtr ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype);
        int PKCS12_parse(IntPtr p12, string pass, out IntPtr pkey, out IntPtr cert, out IntPtr ca);
        void PKCS12_free(IntPtr p12);
        int PEM_write_bio_PKCS8PrivateKey(IntPtr bp, IntPtr evp_pkey, IntPtr evp_cipher, IntPtr kstr, int klen, pem_password_cb cb, IntPtr user_data);
        int PEM_write_bio_X509_INFO(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_X509_INFO(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_X509_AUX(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_X509_AUX(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_X509_REQ(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_X509_REQ(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_X509_REQ_NEW(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_X509_REQ_NEW(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_X509_CRL(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_X509_CRL(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        IntPtr PEM_X509_INFO_read_bio(IntPtr bp, IntPtr sk, pem_password_cb cb, IntPtr u);
        int PEM_X509_INFO_write_bio(IntPtr bp, IntPtr xi, IntPtr enc, byte[] kstr, int klen, IntPtr cd, IntPtr u);
        int PEM_write_bio_DSAPrivateKey(IntPtr bp, IntPtr x, IntPtr enc, byte[] kstr, int klen, pem_password_cb cb, IntPtr u);
        IntPtr PEM_read_bio_DSAPrivateKey(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_DSA_PUBKEY(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_DSA_PUBKEY(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_DSAparams(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_DSAparams(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_RSA_PUBKEY(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_RSA_PUBKEY(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_RSAPrivateKey(IntPtr bp, IntPtr x, IntPtr enc, byte[] kstr, int klen, pem_password_cb cb, IntPtr u);
        IntPtr PEM_read_bio_RSAPrivateKey(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_DHparams(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_DHparams(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_PrivateKey(IntPtr bp, IntPtr x, IntPtr enc, byte[] kstr, int klen, pem_password_cb cb, IntPtr u);
        IntPtr PEM_read_bio_PrivateKey(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        int PEM_write_bio_PUBKEY(IntPtr bp, IntPtr x);
        IntPtr PEM_read_bio_PUBKEY(IntPtr bp, IntPtr x, pem_password_cb cb, IntPtr u);
        IntPtr EVP_md_null();
        IntPtr EVP_md2();
        IntPtr EVP_md4();
        IntPtr EVP_md5();
        IntPtr EVP_sha();
        IntPtr EVP_sha1();
        IntPtr EVP_sha224();
        IntPtr EVP_sha256();
        IntPtr EVP_sha384();
        IntPtr EVP_sha512();
        IntPtr EVP_dss();
        IntPtr EVP_dss1();
        IntPtr EVP_mdc2();
        IntPtr EVP_ripemd160();
        IntPtr EVP_ecdsa();
        void HMAC_CTX_init(IntPtr ctx);
        void HMAC_CTX_set_flags(IntPtr ctx, uint flags);
        void HMAC_CTX_cleanup(IntPtr ctx);
        void HMAC_Init(IntPtr ctx, byte[] key, int len, IntPtr md);
        void HMAC_Init_ex(IntPtr ctx, byte[] key, int len, IntPtr md, IntPtr engine_impl);
        void HMAC_Update(IntPtr ctx, byte[] data, int len);
        void HMAC_Final(IntPtr ctx, byte[] md, ref uint len);
        IntPtr HMAC(IntPtr evp_md, byte[] key, int key_len, byte[] d, int n, byte[] md, ref uint md_len);
        IntPtr EVP_get_cipherbyname(byte[] name);
        IntPtr EVP_enc_null();
        IntPtr EVP_des_ecb();
        IntPtr EVP_des_ede();
        IntPtr EVP_des_ede3();
        IntPtr EVP_des_ede_ecb();
        IntPtr EVP_des_ede3_ecb();
        IntPtr EVP_des_cfb64();
        IntPtr EVP_des_cfb1();
        IntPtr EVP_des_cfb8();
        IntPtr EVP_des_ede_cfb64();
        IntPtr EVP_des_ede3_cfb64();
        IntPtr EVP_des_ede3_cfb1();
        IntPtr EVP_des_ede3_cfb8();
        IntPtr EVP_des_ofb();
        IntPtr EVP_des_ede_ofb();
        IntPtr EVP_des_ede3_ofb();
        IntPtr EVP_des_cbc();
        IntPtr EVP_des_ede_cbc();
        IntPtr EVP_des_ede3_cbc();
        IntPtr EVP_desx_cbc();
        IntPtr EVP_rc4();
        IntPtr EVP_rc4_40();
        IntPtr EVP_idea_ecb();
        IntPtr EVP_idea_cfb64();
        IntPtr EVP_idea_ofb();
        IntPtr EVP_idea_cbc();
        IntPtr EVP_rc2_ecb();
        IntPtr EVP_rc2_cbc();
        IntPtr EVP_rc2_40_cbc();
        IntPtr EVP_rc2_64_cbc();
        IntPtr EVP_rc2_cfb64();
        IntPtr EVP_rc2_ofb();
        IntPtr EVP_bf_ecb();
        IntPtr EVP_bf_cbc();
        IntPtr EVP_bf_cfb64();
        IntPtr EVP_bf_ofb();
        IntPtr EVP_cast5_ecb();
        IntPtr EVP_cast5_cbc();
        IntPtr EVP_cast5_cfb64();
        IntPtr EVP_cast5_ofb();
        IntPtr EVP_rc5_32_12_16_cbc();
        IntPtr EVP_rc5_32_12_16_ecb();
        IntPtr EVP_rc5_32_12_16_cfb64();
        IntPtr EVP_rc5_32_12_16_ofb();
        IntPtr EVP_aes_128_ecb();
        IntPtr EVP_aes_128_cbc();
        IntPtr EVP_aes_128_cfb1();
        IntPtr EVP_aes_128_cfb8();
        IntPtr EVP_aes_128_cfb128();
        IntPtr EVP_aes_128_ofb();
        IntPtr EVP_aes_192_ecb();
        IntPtr EVP_aes_192_cbc();
        IntPtr EVP_aes_192_cfb1();
        IntPtr EVP_aes_192_cfb8();
        IntPtr EVP_aes_192_cfb128();
        IntPtr EVP_aes_192_ofb();
        IntPtr EVP_aes_256_ecb();
        IntPtr EVP_aes_256_cbc();
        IntPtr EVP_aes_256_cfb1();
        IntPtr EVP_aes_256_cfb8();
        IntPtr EVP_aes_256_cfb128();
        IntPtr EVP_aes_256_ofb();
        IntPtr EVP_PKEY_new();
        void EVP_PKEY_free(IntPtr pkey);
        int EVP_PKEY_cmp(IntPtr a, IntPtr b);
        int EVP_PKEY_decrypt(byte[] dec_key, byte[] enc_key, int enc_key_len, IntPtr private_key);
        int EVP_PKEY_encrypt(byte[] enc_key, byte[] key, int key_len, IntPtr pub_key);
        int EVP_PKEY_encrypt_old(byte[] enc_key, byte[] key, int key_len, IntPtr pub_key);
        int EVP_PKEY_type(int type);
        int EVP_PKEY_bits(IntPtr pkey);
        int EVP_PKEY_size(IntPtr pkey);
        int EVP_PKEY_assign(IntPtr pkey, int type, IntPtr key);
        int EVP_PKEY_set1_DSA(IntPtr pkey, IntPtr key);
        IntPtr EVP_PKEY_get1_DSA(IntPtr pkey);
        int EVP_PKEY_set1_RSA(IntPtr pkey, IntPtr key);
        IntPtr EVP_PKEY_get1_RSA(IntPtr pkey);
        int EVP_PKEY_set1_EC_KEY(IntPtr pkey, IntPtr key);
        IntPtr EVP_PKEY_get1_EC_KEY(IntPtr pkey);
        int EVP_PKEY_set1_DH(IntPtr pkey, IntPtr key);
        IntPtr EVP_PKEY_get1_DH(IntPtr pkey);
        int EVP_PKEY_copy_parameters(IntPtr to, IntPtr from);
        int EVP_PKEY_missing_parameters(IntPtr pkey);
        int EVP_PKEY_save_parameters(IntPtr pkey, int mode);
        int EVP_PKEY_cmp_parameters(IntPtr a, IntPtr b);
        void EVP_CIPHER_CTX_init(IntPtr a);
        int EVP_CIPHER_CTX_rand_key(IntPtr ctx, byte[] key);
        int EVP_CIPHER_CTX_set_padding(IntPtr x, int padding);
        int EVP_CIPHER_CTX_set_key_length(IntPtr x, int keylen);
        int EVP_CIPHER_CTX_ctrl(IntPtr ctx, int type, int arg, IntPtr ptr);
        int EVP_CIPHER_CTX_cleanup(IntPtr a);
        int EVP_CIPHER_type(IntPtr ctx);
        int EVP_CipherInit_ex(IntPtr ctx, IntPtr type, IntPtr impl, byte[] key, byte[] iv, int enc);
        int EVP_CipherUpdate(IntPtr ctx, byte[] outb, out int outl, byte[] inb, int inl);
        int EVP_CipherFinal_ex(IntPtr ctx, byte[] outm, ref int outl);
        int EVP_OpenInit(IntPtr ctx, IntPtr type, byte[] ek, int ekl, byte[] iv, IntPtr priv);
        int EVP_OpenFinal(IntPtr ctx, byte[] outb, out int outl);
        int EVP_SealInit(IntPtr ctx, IntPtr type, IntPtr[] ek, int[] ekl, byte[] iv, IntPtr[] pubk, int npubk);
        int EVP_SealFinal(IntPtr ctx, byte[] outb, out int outl);
        int EVP_DecryptUpdate(IntPtr ctx, byte[] output, out int outl, byte[] input, int inl);
        int EVP_EncryptInit_ex(IntPtr ctx, IntPtr cipher, IntPtr impl, byte[] key, byte[] iv);
        int EVP_EncryptUpdate(IntPtr ctx, byte[] output, out int outl, byte[] input, int inl);
        int EVP_BytesToKey(IntPtr type, IntPtr md, byte[] salt, byte[] data, int datal, int count, byte[] key, byte[] iv);
        int EVP_MD_type(IntPtr md);
        int EVP_MD_pkey_type(IntPtr md);
        int EVP_MD_size(IntPtr md);
        int EVP_MD_block_size(IntPtr md);
        uint EVP_MD_flags(IntPtr md);
        IntPtr EVP_get_digestbyname(byte[] name);
        void EVP_MD_CTX_init(IntPtr ctx);
        int EVP_MD_CTX_cleanup(IntPtr ctx);
        IntPtr EVP_MD_CTX_create();
        void EVP_MD_CTX_destroy(IntPtr ctx);
        int EVP_DigestInit_ex(IntPtr ctx, IntPtr type, IntPtr impl);
        int EVP_DigestUpdate(IntPtr ctx, byte[] d, uint cnt);
        int EVP_DigestFinal_ex(IntPtr ctx, byte[] md, ref uint s);
        int EVP_Digest(byte[] data, uint count, byte[] md, ref uint size, IntPtr type, IntPtr impl);
        int EVP_SignFinal(IntPtr ctx, byte[] md, ref uint s, IntPtr pkey);
        int EVP_VerifyFinal(IntPtr ctx, byte[] sigbuf, uint siglen, IntPtr pkey);
        int EC_get_builtin_curves(IntPtr r, int nitems);
        IntPtr EC_GFp_simple_method();
        IntPtr EC_GFp_mont_method();
        IntPtr EC_GFp_nist_method();
        IntPtr EC_GF2m_simple_method();
        int EC_METHOD_get_field_type(IntPtr meth);
        IntPtr EC_GROUP_new(IntPtr meth);
        void EC_GROUP_free(IntPtr group);
        void EC_GROUP_clear_free(IntPtr group);
        int EC_GROUP_copy(IntPtr dst, IntPtr src);
        IntPtr EC_GROUP_dup(IntPtr src);
        IntPtr EC_GROUP_method_of(IntPtr group);
        int EC_GROUP_set_generator(IntPtr group, IntPtr generator, IntPtr order, IntPtr cofactor);
        IntPtr EC_GROUP_get0_generator(IntPtr group);
        int EC_GROUP_get_order(IntPtr group, IntPtr order, IntPtr ctx);
        int EC_GROUP_get_cofactor(IntPtr group, IntPtr cofactor, IntPtr ctx);
        void EC_GROUP_set_curve_name(IntPtr group, int nid);
        int EC_GROUP_get_curve_name(IntPtr group);
        void EC_GROUP_set_asn1_flag(IntPtr group, int flag);
        int EC_GROUP_get_asn1_flag(IntPtr group);
        void EC_GROUP_set_point_conversion_form(IntPtr x, int y);
        int EC_GROUP_get_point_conversion_form(IntPtr x);
        byte[] EC_GROUP_get0_seed(IntPtr x);
        int EC_GROUP_get_seed_len(IntPtr x);
        int EC_GROUP_set_seed(IntPtr x, byte[] buf, int len);
        int EC_GROUP_set_curve_GFp(IntPtr group, IntPtr p, IntPtr a, IntPtr b, IntPtr ctx);
        int EC_GROUP_get_curve_GFp(IntPtr group, IntPtr p, IntPtr a, IntPtr b, IntPtr ctx);
        int EC_GROUP_set_curve_GF2m(IntPtr group, IntPtr p, IntPtr a, IntPtr b, IntPtr ctx);
        int EC_GROUP_get_curve_GF2m(IntPtr group, IntPtr p, IntPtr a, IntPtr b, IntPtr ctx);
        int EC_GROUP_get_degree(IntPtr group);
        int EC_GROUP_check(IntPtr group, IntPtr ctx);
        int EC_GROUP_check_discriminant(IntPtr group, IntPtr ctx);
        int EC_GROUP_cmp(IntPtr a, IntPtr b, IntPtr ctx);
        IntPtr EC_GROUP_new_curve_GFp(IntPtr p, IntPtr a, IntPtr b, IntPtr ctx);
        IntPtr EC_GROUP_new_curve_GF2m(IntPtr p, IntPtr a, IntPtr b, IntPtr ctx);
        IntPtr EC_GROUP_new_by_curve_name(int nid);
        int EC_GROUP_precompute_mult(IntPtr group, IntPtr ctx);
        int EC_GROUP_have_precompute_mult(IntPtr group);
        IntPtr EC_POINT_new(IntPtr group);
        void EC_POINT_free(IntPtr point);
        void EC_POINT_clear_free(IntPtr point);
        int EC_POINT_copy(IntPtr dst, IntPtr src);
        IntPtr EC_POINT_dup(IntPtr src, IntPtr group);
        IntPtr EC_POINT_method_of(IntPtr point);
        int EC_POINT_set_to_infinity(IntPtr group, IntPtr point);
        int EC_POINT_set_Jprojective_coordinates_GFp(IntPtr group, IntPtr p, IntPtr x, IntPtr y, IntPtr z, IntPtr ctx);
        int EC_POINT_get_Jprojective_coordinates_GFp(IntPtr group, IntPtr p, IntPtr x, IntPtr y, IntPtr z, IntPtr ctx);
        int EC_POINT_set_affine_coordinates_GFp(IntPtr group, IntPtr p, IntPtr x, IntPtr y, IntPtr ctx);
        int EC_POINT_get_affine_coordinates_GFp(IntPtr group, IntPtr p, IntPtr x, IntPtr y, IntPtr ctx);
        int EC_POINT_set_compressed_coordinates_GFp(IntPtr group, IntPtr p, IntPtr x, int y_bit, IntPtr ctx);
        int EC_POINT_set_affine_coordinates_GF2m(IntPtr group, IntPtr p, IntPtr x, IntPtr y, IntPtr ctx);
        int EC_POINT_get_affine_coordinates_GF2m(IntPtr group, IntPtr p, IntPtr x, IntPtr y, IntPtr ctx);
        int EC_POINT_set_compressed_coordinates_GF2m(IntPtr group, IntPtr p, IntPtr x, int y_bit, IntPtr ctx);
        int EC_POINT_point2oct(IntPtr group, IntPtr p, int form, byte[] buf, int len, IntPtr ctx);
        int EC_POINT_oct2point(IntPtr group, IntPtr p, byte[] buf, int len, IntPtr ctx);
        IntPtr EC_POINT_point2bn(IntPtr a, IntPtr b, int form, IntPtr c, IntPtr d);
        IntPtr EC_POINT_bn2point(IntPtr a, IntPtr b, IntPtr c, IntPtr d);
        string EC_POINT_point2hex(IntPtr a, IntPtr b, int form, IntPtr c);
        IntPtr EC_POINT_hex2point(IntPtr a, string s, IntPtr b, IntPtr c);
        int EC_POINT_add(IntPtr group, IntPtr r, IntPtr a, IntPtr b, IntPtr ctx);
        int EC_POINT_dbl(IntPtr group, IntPtr r, IntPtr a, IntPtr ctx);
        int EC_POINT_invert(IntPtr group, IntPtr a, IntPtr ctx);
        int EC_POINT_is_at_infinity(IntPtr group, IntPtr p);
        int EC_POINT_is_on_curve(IntPtr group, IntPtr point, IntPtr ctx);
        int EC_POINT_cmp(IntPtr group, IntPtr a, IntPtr b, IntPtr ctx);
        int EC_POINT_make_affine(IntPtr a, IntPtr b, IntPtr c);
        int EC_POINTs_make_affine(IntPtr a, int num, IntPtr[] b, IntPtr c);
        int EC_POINTs_mul(IntPtr group, IntPtr r, IntPtr n, int num, IntPtr[] p, IntPtr[] m, IntPtr ctx);
        int EC_POINT_mul(IntPtr group, IntPtr r, IntPtr n, IntPtr q, IntPtr m, IntPtr ctx);
        IntPtr EC_KEY_new();
        IntPtr EC_KEY_new_by_curve_name(int nid);
        void EC_KEY_free(IntPtr key);
        IntPtr EC_KEY_copy(IntPtr dst, IntPtr src);
        IntPtr EC_KEY_dup(IntPtr src);
        int EC_KEY_up_ref(IntPtr key);
        IntPtr EC_KEY_get0_group(IntPtr key);
        int EC_KEY_set_group(IntPtr key, IntPtr group);
        IntPtr EC_KEY_get0_private_key(IntPtr key);
        int EC_KEY_set_private_key(IntPtr key, IntPtr prv);
        IntPtr EC_KEY_get0_public_key(IntPtr key);
        int EC_KEY_set_public_key(IntPtr key, IntPtr pub);
        uint EC_KEY_get_enc_flags(IntPtr key);
        void EC_KEY_set_enc_flags(IntPtr x, uint y);
        int EC_KEY_get_conv_form(IntPtr x);
        void EC_KEY_set_conv_form(IntPtr x, int y);
        IntPtr EC_KEY_get_key_method_data(IntPtr x, EC_KEY_dup_func dup_func, EC_KEY_free_func free_func, EC_KEY_free_func clear_free_func);
        void EC_KEY_insert_key_method_data(IntPtr x, IntPtr data, EC_KEY_dup_func dup_func, EC_KEY_free_func free_func, EC_KEY_free_func clear_free_func);
        void EC_KEY_set_asn1_flag(IntPtr x, int y);
        int EC_KEY_precompute_mult(IntPtr key, IntPtr ctx);
        int EC_KEY_generate_key(IntPtr key);
        int EC_KEY_check_key(IntPtr key);
        IntPtr ECDSA_SIG_new();
        void ECDSA_SIG_free(IntPtr sig);
        int i2d_ECDSA_SIG(IntPtr sig, byte[] pp);
        IntPtr d2i_ECDSA_SIG(IntPtr sig, byte[] pp, long len);
        IntPtr ECDSA_do_sign(byte[] dgst, int dgst_len, IntPtr eckey);
        IntPtr ECDSA_do_sign_ex(byte[] dgst, int dgstlen, IntPtr kinv, IntPtr rp, IntPtr eckey);
        int ECDSA_do_verify(byte[] dgst, int dgst_len, IntPtr sig, IntPtr eckey);
        IntPtr ECDSA_OpenSSL();
        void ECDSA_set_default_method(IntPtr meth);
        IntPtr ECDSA_get_default_method();
        int ECDSA_set_method(IntPtr eckey, IntPtr meth);
        int ECDSA_size(IntPtr eckey);
        int ECDSA_sign_setup(IntPtr eckey, IntPtr ctx, IntPtr kinv, IntPtr rp);
        int ECDSA_sign(int type, byte[] dgst, int dgstlen, byte[] sig, ref uint siglen, IntPtr eckey);
        int ECDSA_sign_ex(int type, byte[] dgst, int dgstlen, byte[] sig, ref uint siglen, IntPtr kinv, IntPtr rp, IntPtr eckey);
        int ECDSA_verify(int type, byte[] dgst, int dgstlen, byte[] sig, int siglen, IntPtr eckey);
        int ECDSA_get_ex_new_index(IntPtr argl, IntPtr argp, IntPtr new_func, IntPtr dup_func, IntPtr free_func);
        int ECDSA_set_ex_data(IntPtr d, int idx, IntPtr arg);
        IntPtr ECDSA_get_ex_data(IntPtr d, int idx);
        void ERR_load_ECDSA_strings();
        IntPtr ECDH_OpenSSL();
        void ECDH_set_default_method(IntPtr method);
        IntPtr ECDH_get_default_method();
        int ECDH_set_method(IntPtr key, IntPtr method);
        int ECDH_compute_key(byte[] pout, int outlen, IntPtr pub_key, IntPtr ecdh, ECDH_KDF kdf);
        int ECDH_get_ex_new_index(IntPtr argl, IntPtr argp, IntPtr new_func, IntPtr dup_func, IntPtr free_func);
        int ECDH_set_ex_data(IntPtr d, int idx, IntPtr arg);
        IntPtr ECDH_get_ex_data(IntPtr d, int idx);
        void ERR_load_ECDH_strings();
        IntPtr BIO_new_file(string filename, string mode);
        IntPtr BIO_new_mem_buf(byte[] buf, int len);
        IntPtr BIO_s_mem();
        IntPtr BIO_f_md();
        IntPtr BIO_f_null();
        IntPtr BIO_push(IntPtr bp, IntPtr append);
        int BIO_ctrl(IntPtr bp, int cmd, int larg, IntPtr parg);
        int BIO_int_ctrl(IntPtr bp, int cmd, int larg, int parg);
        IntPtr BIO_new(IntPtr type);
        int BIO_read(IntPtr b, byte[] buf, int len);
        int BIO_write(IntPtr b, byte[] buf, int len);
        int BIO_puts(IntPtr b, byte[] buf);
        int BIO_gets(IntPtr b, byte[] buf, int len);
        int BIO_free(IntPtr bio);
        void BIO_free_all(IntPtr bio);
        uint BIO_number_read(IntPtr bio);
        uint BIO_number_written(IntPtr bio);
        uint BIO_ctrl_pending(IntPtr bio);
        void ERR_load_crypto_strings();
        uint ERR_get_error();
        void ERR_error_string_n(uint e, byte[] buf, int len);
        IntPtr ERR_lib_error_string(uint e);
        IntPtr ERR_func_error_string(uint e);
        IntPtr ERR_reason_error_string(uint e);
        void ERR_remove_thread_state(IntPtr tid);
        void ERR_clear_error();
        void ERR_print_errors_cb(err_cb cb, IntPtr u);
        IntPtr NCONF_new(IntPtr meth);
        void NCONF_free(IntPtr conf);
        int NCONF_load(IntPtr conf, string file, ref int eline);
        IntPtr NCONF_get_string(IntPtr conf, byte[] group, byte[] name);
        void X509V3_set_ctx(IntPtr ctx, IntPtr issuer, IntPtr subject, IntPtr req, IntPtr crl, int flags);
        void X509V3_set_nconf(IntPtr ctx, IntPtr conf);
        int X509V3_EXT_add_nconf(IntPtr conf, IntPtr ctx, byte[] section, IntPtr cert);
        int FIPS_mode_set(int onoff);
    }

    public interface ILibSSLWrapper
    {
        void SSL_load_error_strings();
        int SSL_library_init();
        IntPtr SSLv2_method();
        IntPtr SSLv2_server_method();
        IntPtr SSLv2_client_method();
        IntPtr SSLv3_method();
        IntPtr SSLv3_server_method();
        IntPtr SSLv3_client_method();
        IntPtr SSLv23_method();
        IntPtr SSLv23_server_method();
        IntPtr SSLv23_client_method();
        IntPtr TLSv1_method();
        IntPtr TLSv1_client_method();
        IntPtr TLSv1_server_method();
        IntPtr TLSv1_1_method();
        IntPtr TLSv1_1_server_method();
        IntPtr TLSv1_1_client_method();
        IntPtr TLSv1_2_method();
        IntPtr TLSv1_2_server_method();
        IntPtr TLSv1_2_client_method();
        IntPtr DTLSv1_method();
        IntPtr DTLSv1_client_method();
        IntPtr DTLSv1_server_method();
        IntPtr DTLSv1_2_method();
        IntPtr DTLSv1_2_client_method();
        IntPtr DTLSv1_2_server_method();
        IntPtr SSL_CTX_new(IntPtr sslMethod);
        void SSL_CTX_free(IntPtr ctx);
        int SSL_CTX_ctrl(IntPtr ctx, int cmd, int arg, IntPtr parg);
        void SSL_CTX_set_cert_store(IntPtr ctx, IntPtr cert_store);
        void SSL_CTX_set_verify(IntPtr ctx, int mode, VerifyCertCallback callback);
        void SSL_CTX_set_verify_depth(IntPtr ctx, int depth);
        void SSL_CTX_set_client_CA_list(IntPtr ctx, IntPtr name_list);
        IntPtr SSL_CTX_get_client_CA_list(IntPtr ctx);
        int SSL_CTX_load_verify_locations(IntPtr ctx, string file, string path);
        int SSL_CTX_set_default_verify_paths(IntPtr ctx);
        int SSL_CTX_set_cipher_list(IntPtr ctx, string cipher_string);
        int SSL_CTX_use_certificate_chain_file(IntPtr ctx, string file);
        int SSL_CTX_use_certificate(IntPtr ctx, IntPtr cert);
        int SSL_CTX_use_PrivateKey(IntPtr ctx, IntPtr pkey);
        int SSL_CTX_use_PrivateKey_file(IntPtr ctx, string file, int type);
        int SSL_CTX_check_private_key(IntPtr ctx);
        int SSL_CTX_set_session_id_context(IntPtr ctx, byte[] sid_ctx, uint sid_ctx_len);
        void SSL_CTX_set_default_passwd_cb_userdata(IntPtr ssl, IntPtr data);
        void SSL_CTX_set_default_passwd_cb(IntPtr ssl, pem_password_cb callback);
        void SSL_CTX_set_client_cert_cb(IntPtr ssl_ctx, client_cert_cb callback);
        string SSL_CIPHER_description(IntPtr ssl_cipher, byte[] buf, int buf_len);
        IntPtr SSL_CIPHER_get_name(IntPtr ssl_cipher);
        int SSL_CIPHER_get_bits(IntPtr ssl_cipher, out int alg_bits);
        IntPtr SSL_CIPHER_get_version(IntPtr ssl_cipher);
        IntPtr SSL_get_current_cipher(IntPtr ssl);
        IntPtr SSL_get_ciphers(IntPtr ssl);
        int SSL_get_verify_result(IntPtr ssl);
        int SSL_set_verify_result(IntPtr ssl, int v);
        IntPtr SSL_get_peer_certificate(IntPtr ssl);
        int SSL_get_error(IntPtr ssl, int ret_code);
        int SSL_accept(IntPtr ssl);
        int SSL_shutdown(IntPtr ssl);
        int SSL_write(IntPtr ssl, byte[] buf, int len);
        int SSL_read(IntPtr ssl, byte[] buf, int len);
        int SSL_renegotiate(IntPtr ssl);
        int SSL_set_session_id_context(IntPtr ssl, byte[] sid_ctx, uint sid_ctx_len);
        int SSL_do_handshake(IntPtr ssl);
        void SSL_set_connect_state(IntPtr ssl);
        void SSL_set_accept_state(IntPtr ssl);
        int SSL_connect(IntPtr ssl);
        IntPtr SSL_new(IntPtr ctx);
        void SSL_free(IntPtr ssl);
        int SSL_state(IntPtr ssl);
        void SSL_set_state(IntPtr ssl, int state);
        void SSL_set_bio(IntPtr ssl, IntPtr read_bio, IntPtr write_bio);
        int SSL_use_certificate_file(IntPtr ssl, string file, int type);
        int SSL_use_PrivateKey_file(IntPtr ssl, string file, int type);
        int SSL_version(IntPtr ssl);
        int SSL_clear(IntPtr ssl);
        IntPtr SSL_load_client_CA_file(string file);
        IntPtr SSL_get_client_CA_list(IntPtr ssl);
        void SSL_set_client_CA_list(IntPtr ssl, IntPtr name_list);
        IntPtr SSL_get_certificate(IntPtr ssl);
        int SSL_use_certificate(IntPtr ssl, IntPtr x509);
        int SSL_use_PrivateKey(IntPtr ssl, IntPtr evp_pkey);
        int SSL_ctrl(IntPtr ssl, int cmd, int larg, IntPtr parg);
        IntPtr SSL_get_servername(IntPtr s, int type);
        int SSL_get_servername_type(IntPtr s);
        IntPtr SSL_get_session(IntPtr s);
        int SSL_CTX_callback_ctrl(IntPtr ctx, int cmd, IntPtr cb);
    }
}
